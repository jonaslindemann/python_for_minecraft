{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    tutorial.md", 
            "title": "Hem"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    tutorial.md", 
            "title": "Project layout"
        }, 
        {
            "location": "/chapter1/", 
            "text": "Koda i Minecraft\n\n\nVad \u00e4r programmering\n\n\nEn dator \u00e4r uppbyggd kring ett antal delar som samarbetar f\u00f6r att du ska kunna anv\u00e4nda program, spela spel och titta p\u00e5 bilder. Den viktigaste delen \u00e4r processorn eller central processing unit (CPU). Processorn \u00e4r expert p\u00e5 att utf\u00f6ra instruktioner, som t ex ber\u00e4kna summan av 2+2, fyll minnet med text eller rita linjer p\u00e5 sk\u00e4rmen. Den andra viktiga delen i datorn \u00e4r minnet. Minnet anv\u00e4nds f\u00f6r att lagra de instruktioner som ska utf\u00f6ras av processorn samt information som anv\u00e4nds f\u00f6r att visa text, grafik och video p\u00e5 sk\u00e4rmen. Ett antal av dessa instruktioner som tillsammans utf\u00f6r en uppgift kallar man ett program eller en applikation. \n\n\nDe instruktioner som processorn utf\u00f6r kallas f\u00f6r maskininstruktioner och \u00e4r mycket komplicerade att skriva. F\u00f6r att g\u00f6ra det enklare anv\u00e4nder man ist\u00e4llet n\u00e5gon form av programmeringsspr\u00e5k, som anv\u00e4nder instruktioner som \u00e4r enklare f\u00f6r oss att skriva och f\u00f6rst\u00e5. Dessa instruktioner \u00f6vers\u00e4tts med hj\u00e4lp av ett speciellt program som kallas kompilator eller \u00f6vers\u00e4ttare till maskininstruktioner.\n\n\nInstruktioner skrivna i ett programmeringsspr\u00e5k kallas tillsammans f\u00f6r programkod eller k\u00e4llkod. Programkoden skrivs ofta i en texteditor eller en speciell utvecklingsmilj\u00f6 som kopplar ihop en texteditor med en kompilator.\n\n\nF\u00f6r att f\u00e5 datorn att g\u00f6ra n\u00e5got anv\u00e4nder vi oss av n\u00e5got som kallas funktioner eller kommandon. Dessa talar om f\u00f6r datorn vad vi vill g\u00f6ra. Ett typiskt kommando eller funktion i Python best\u00e5r av 2 delar, funktionsnamnet och indata till funktionen (...). F\u00f6ljande exempel visar hur vi kan skicka ett meddelande till chatt-f\u00f6nstret i Minecraft.\n\n\nminecraft.postToChat(\"Hejsan Minecraft!\")\n\n\n\nminecraft.postToChat\n \u00e4r funktionsnamnet, \n(\"Hejsan Minecraft!\")\n \u00e4r indata till kommandot. \n\n\nGenom att s\u00e4tta ihop flera instruktioner talar man om f\u00f6r datorn hur den ska utf\u00f6ra en uppgift p\u00e5 samma s\u00e4tt som instruktionerna i recepten i kokboken. I n\u00e4sta exempel l\u00e4gger vill 2 kommandon till. Ett kommando, \nsleep(5)\n, anger att programmet ska v\u00e4nta i 5 sekunder och ett kommando som skriver ut \"Hej igen!\" i chatt-f\u00f6nstret:\n\n\nminecraft.postToChat(\"Hejsan Minecraft!\")\nsleep(5)\nminecraft.postToChat(\"Hej igen!\")\n\n\n\nK\u00f6r man programmet igen kommer f\u00f6ljande upp i Minecraft:\n\n\n\n\nAnpassa Minecraft\n\n\nF\u00f6r att det ska bli l\u00e4ttare att programmera med Minecraft kan det vara bra att st\u00e4nga av funktionen i Minecraft som pausar programmet n\u00e4r man byter program i Windows. Detta g\u00f6rs genom att trycka p\u00e5 \nF3 + P\n. N\u00e4r detta \u00e4r gjort tryck en kort g\u00e5ng p\u00e5 \nF3\n f\u00f6r att ta bort informationstexten. Tryck \nF3 + P\n igen f\u00f6r att \u00e5terst\u00e4lla Minecraft inst\u00e4llningen igen.\n\n\nM\u00e5nga egenskaper i Minecraft g\u00e5r att styra ifr\u00e5n chattf\u00f6nstret. Detta f\u00f6nster \u00f6ppnas genom att trycka p\u00e5 T. N\u00e5gra bra kommandon man kan skriva i detta \u00e4r:\n\n\n\n\n/time set day\n - \u00c5terst\u00e4ller tiden till morgon (10:00)\n\n\n/weather clear\n - Fint v\u00e4der \n\n\n\n\nMitt f\u00f6rsta Minecraft program\n\n\nVi ska nu skapa v\u00e5rt f\u00f6rsta Minecraft program i Python. Skapa en ny Python-fil i IDLE eller i Python f\u00f6r Minecraft Editorn. \n\n\nDet f\u00f6rsta vi m\u00e5ste g\u00f6ra i v\u00e5rt program \u00e4r att tala om f\u00f6r Python att vi beh\u00f6ver kommandon f\u00f6r att prata med Minecraft, samt kommandon f\u00f6r att kunna g\u00f6ra pauser i programk\u00f6rningen. Skriv in f\u00f6ljande rader i editorn. \n\n\nfrom mc import *\nfrom time import *\n\n\n\nI n\u00e4sta steg skapar vi kopplingen till Minecraft. \n\n\nminecraft = Minecraft()\n\n\n\nDetta g\u00f6r att vi f\u00e5r tillg\u00e5ng till Minecraft genom en objektet, minecraft. minecraft-objektet inneh\u00e5ller alla de kommandon som beh\u00f6vs f\u00f6r att styra Minecraft, t ex genom att l\u00e4gga till f\u00f6ljande kommandon:\n\n\nminecraft.postToChat(\"Hejsan Minecraft!\")\nsleep(5)\nminecraft.postToChat(\"Hej igen!\")\n\n\n\nDet kompletta programmet ser ut s\u00e5 h\u00e4r:\n\n\nfrom mc import *\nfrom time import *\n\nminecraft = Minecraft()\n\nminecraft.postToChat(\"Hejsan Minecraft!\")\nsleep(5)\nminecraft.postToChat(\"Hej igen!\")\n\n\n\n\n\n\u00d6vning 1\n\n\nModifiera programmet s\u00e5 att det skriver ut fler meddelanden i chattf\u00f6nstret. Vad h\u00e4nder om man \u00e4ndrar siffran i sleep(..) kommandot?\n\n\n\n\nVar \u00e4r jag n\u00e5gonstans?\n\n\nOm vi skall bygga och skapa saker i Minecraft kan det vara bra att veta var man \u00e4r n\u00e5gonstans. I Minecraft best\u00e4ms detta av ett s\u00e5 kallat koordinatsystem med 3 axlar, X, Y och Z. Det g\u00e5r att se var man befinner sig i detta koordinatsystem genom att trycka p\u00e5 \nF3\n.  \n\n\n\n\nXYZ: anger var spelaren befinner sig i v\u00e4rlden. I bilden befinner sig spelare i position (X = -310, Y =  4, Z = 478). X och Z anger var spelaren befinner sig l\u00e4ngs marken. Y anger p\u00e5 vilken h\u00f6jd spelaren befinner sig.\n\n\nI programkoden kan man ta reda p\u00e5 spelarens position med f\u00f6ljande kommando:\n\n\npos = minecraft.player.getTilePos()\n\n\n\nKommandot minecraft.player.getTilePos fr\u00e5gar Minecraft var spelaren befinner sig f\u00f6r tillf\u00e4llet. Vi f\u00e5r tillbaka en s.k. variabel, \npos\n som inneh\u00e5ller spelarens position. \n\n\n\n\nVariabler\n - I b\u00f6rjan av denna text pratade vi om hur datorn lagrar program och information i minnet. I program beh\u00f6ver vi ocks\u00e5 ofta lagra information, som t ex siffror, text och grafik i minnet f\u00f6r att kunna h\u00e4mta tillbaka det n\u00e4r vi beh\u00f6ver det. I de tidigare exemplen har vi angett siffror direkt till funktionerna. M\u00e5nga g\u00e5nger har vi ocks\u00e5 angett samma siffra m\u00e5nga g\u00e5nger. F\u00f6r att f\u00f6renkla hanteringen av information i program anv\u00e4nder man sig av variabler. Variabler kan liknas vid en l\u00e5da i en byr\u00e5l\u00e5da med en etikett p\u00e5. I l\u00e5dan kan vi l\u00e4gga olika saker. Etiketten g\u00f6r det l\u00e4tt att hitta sakerna i l\u00e5dan igen. I datorns v\u00e4rld anger en variabel en plats i minnet. Namnet p\u00e5 variabeln \u00e4r etiketten som g\u00f6r att vi kan hitta tillbaka till denna minnesplats igen.\n\n\n\n\npos\n inneh\u00e5ller spelarens X, Y och Z position i f\u00f6rh\u00e5llande till den position man startade i v\u00e4rlden. Vi kan skriva ut inneh\u00e5llet i dessa till chattf\u00f6nstret med f\u00f6ljande kommandon:\n\n\nminecraft.postToChat(pos.x)\nminecraft.postToChat(pos.y)\nminecraft.postToChat(pos.z)\n\n\n\nI Minecraft visas d\u00e5 \n\n\n\n\ni chattf\u00f6nstret. 20 \u00e4r v\u00e5r position i x-led, 0 \u00e4r positionen i y-led och 15 \u00e4r v\u00e5r position i z-led.\n\n\nDet kompletta programmet visas i f\u00f6ljande listning:\n\n\nfrom mc import *\n\nminecraft = Minecraft()\n\npos = minecraft.player.getTilePos()\n\nminecraft.postToChat(pos.x)\nminecraft.postToChat(pos.y)\nminecraft.postToChat(pos.z)\n\n\n\n\n\n\u00d6vning 2\n\n\nProva att g\u00e5 till olika st\u00e4llen i Minecraft f\u00f6r att se hur det p\u00e5verkar X, Y och Z v\u00e4rdena i \npos\n variabeln.\n\n\n\n\nVi kan skriva ut spelarens position p\u00e5 ett mer elegant s\u00e4tt genom att \u00e4ndra de tre tidigare kommandona till ett enda kommando:\n\n\nminecraft.postToChat(\"x = \" + str(pos.x) + \", y = \" + str(pos.y) + \", z = \" + str(pos.z))\n\n\n\nI det ovanst\u00e5ende kommadot anv\u00e4nder vi + f\u00f6r att sl\u00e5 ihop flera texter. str(...) \u00f6vers\u00e4tter siffror till text.\n\n\nEnkel upprepning\n\n\nM\u00e5nga g\u00e5nger n\u00e4r man skriver program m\u00e5ste man upprepa kommandon m\u00e5nga g\u00e5nger. F\u00f6r att g\u00f6ra det enklare kan vi instruera datorn att hela tiden upprepa vissa kommandon. Detta kallas ofta f\u00f6r att man skapar loopar. Vi skall nu modifiera v\u00e5rt program att med j\u00e4mna mellanrum skriva ut spelarens position i chattf\u00f6nstret. I exemplet skall vi anv\u00e4nda en s.k. while-sats. Denna upprepar kommandon tills dess att ett visst villkor inte \u00e4r uppfyllt l\u00e4ngre. Vi skriver in f\u00f6ljande:\n\n\nwhile True:\n    sleep(1)\n    pos = minecraft.player.getTilePos()\n    minecraft.postToChat(\"x = %g, y = %g, z = %g\" % (pos.x, pos.y, pos.z))\n\n\n\nKommandon som skall upprepas m\u00e5ste vara indragna i f\u00f6rh\u00e5llande till while-satsen. While-satsen m\u00e5ste ocks\u00e5 avslutas med ett : f\u00f6r att indikera var de upprepade kommandona b\u00f6rjar. \nsleep(1)\n anger att programk\u00f6rningen skall pausa i 1 sekund. \u00d6vriga kommandon tar reda p\u00e5 spelarens position och skriver ut denna i chattf\u00f6nstret. Om allt fungerar visas f\u00f6ljande i chattf\u00f6nstret:\n\n\n\n\nT\u00e4nk p\u00e5 att detta program aldrig stannar, s\u00e5 att vi m\u00e5ste trycka p\u00e5 stopp-knappen i editorn eller Ctrl-C i IDLE.\n\n\nDet kompletta programmet visas i f\u00f6ljande listning:\n\n\nfrom mc import *\nfrom time import *\n\nminecraft = Minecraft()\n\nwhile True:\n    sleep(1)\n    pos = minecraft.player.getTilePos()\n    minecraft.postToChat(\"x = %g, y = %g, z = %g\" % (pos.x, pos.y, pos.z))\n\n\n\nSkapa block\n\n\nBlock skapas Minecraft med kommandot \nsetBlock(..)\n Indata till kommandot \u00e4r positionen in X, Y och Z samt blockets id. F\u00f6r att s\u00e4tta ut ett stenblock anger man f\u00f6ljande kommando:\n\n\npos = minecraft.player.getTilePos()\n\nminecraft.setBlock(pos.x+3, pos.y, pos.z, STONE.id)\n\n\n\nDetta s\u00e4tter ut ett block av typen STONE.id 3 block fr\u00e5n spelaren i X-led och p\u00e5 samma h\u00f6jd som spelaren. Vi kan nu skapa fler block genom att l\u00e4gga till fler kommandon:\n\n\npos = minecraft.player.getTilePos()\n\nminecraft.setBlock(pos.x+3, pos.y, pos.z, STONE.id)\nminecraft.setBlock(pos.x+3, pos.y+1, pos.z, COBBLESTONE.id)\nminecraft.setBlock(pos.x+3, pos.y, pos.z+1, WOOD_PLANKS.id)\nminecraft.setBlock(pos.x+3, pos.y+1, pos.z+1, GOLD_ORE.id)\n\n\n\n\n\nMan kan anv\u00e4nda bl\u00e4ddraren i editorn f\u00f6r att klistra in block i koden. V\u00e4lj ett block i lista n och klicka sedan \nL\u00e4gg till\n enligt f\u00f6ljande figur:\n\n\n\n\nDet g\u00e5r att skapa m\u00e5nga block p\u00e5 en g\u00e5ng genom att anv\u00e4nda kommandot \nsetBlocks\n. I detta kommando kan man ange start och slut position mellan vilka blocken skall placeras. I f\u00f6ljande kommandon s\u00e4tter vi ut l\u00f6vblock fr\u00e5n (X + 10, Y, Z + 10) - (X + 20, Y + 4, Z + 20):\n\n\npos = minecraft.player.getTilePos()\n\nminecraft.setBlocks(pos.x + 10, pos.y, pos.z + 10, pos.x + 20, pos.y + 4, pos.z + 20, LEAVES.id)\n\n\n\n\n\nDet g\u00e5r ocks\u00e5 att s\u00e4tta ut luftblock AIR.id och vatten block, WATER.id, p\u00e5 detta s\u00e4tt. I f\u00f6ljande exempel bygger vi ett akvarie genom att f\u00f6rst skapa block av glas och sedan fylla den inre delen av detta block med vatten:\n\n\npos = minecraft.player.getTilePos()\n\nminecraft.setBlocks(pos.x - 20, pos.y, pos.z - 20, pos.x - 10, pos.y + 6, pos.z - 10, GLASS.id)\nminecraft.setBlocks(pos.x - 19, pos.y + 1, pos.z -19, pos.x - 11, pos.y + 5, pos.z -11, WATER.id)\n\n\n\n\n\nAtt det \u00e4r vatten kan vi se om vi sl\u00e5r i s\u00f6nder ett av f\u00f6nsterblocken:\n\n\n\n\n\n\n\u00d6vning 3\n\n\nProva att skapa ett hus av sten eller n\u00e5got annat material och sedan gr\u00f6pa ur det genom att skapa luftblock inuti.\n\n\n\n\nAnv\u00e4nda sk\u00f6ldpaddsgrafik (turtle) i Minecraft\n\n\nF\u00f6r att g\u00f6ra det l\u00e4ttare att skapa och ta bort block kan man anv\u00e4nda en s.k. sk\u00f6ldpadda med en 3D penna f\u00f6r att skapa block eller ta bort block. Tunnlar i Minecraft kan vara jobbiga att g\u00f6ra f\u00f6r hand. Med hj\u00e4lp av sk\u00f6ldpaddan kan vi snabbt och enkelt borra h\u00e5l i v\u00e5r v\u00e4rld precis som n\u00e4r man skapar riktiga tunnlar. F\u00f6ljande exempel visar hur vi gr\u00e4ver en 5 block bred tunnnel ner i marken och sedan upp igen:\n\n\nfrom mc import *\nfrom mcturtle import *\n\nminecraft = Minecraft()\n\nturtle = Turtle()\n\nturtle.pendelay(0)         # Anger hur om uppritningen skall ske l\u00e5ngsamt eller snabbt \nmaterial = AIR             # Variabel f\u00f6r materialet som skall anv\u00e4ndas\nturtle.penwidth(5)         # Tjocklek p\u00e5 \"pennan\"\nturtle.penblock(material)  # S\u00e4tt pennans material\nturtle.pendown()           # B\u00f6rja gr\u00e4va\nturtle.down(45)            # 45 grader ned\u00e5t\nturtle.go(20)              # 20 block fram\u00e5t\nturtle.up(45)              # 45 grader upp\u00e5t\nturtle.go(20)              # 20 block fram\u00e5t\nturtle.up(45)              # upp 45 grader\nturtle.go(20)              # 20 block fram\u00e5t\nturtle.penup()             # Avsluta ritandet\n\n\n\nOm programmet k\u00f6rs skapas nu en tunnel ner i marken:\n\n\n\n\nP\u00e5v\u00e4g ner i tunneln.\n\n\n\n\nNere i tunneln. Lamporna \u00e4r tillagda i efterhand.\n\n\n\n\nP\u00e5v\u00e4g upp.\n\n\n\n\nI det tidigare exemplet anv\u00e4nde vi tomma block, AIR.id, f\u00f6r att skapa tunnlar. Vi kan ocks\u00e5 skapa strukturer med sk\u00f6ldpaddan. I f\u00f6ljande exempel skapar vi en skulptur av GOLD_BLOCK.id.\n\n\nfrom mc import *\nfrom mcturtle import *\n\nminecraft = Minecraft()\n\nturtle = Turtle()\n\nturtle.pendelay(0)\nmaterial = GOLD_BLOCK.id\nturtle.penwidth(2)\nturtle.penblock(material)\nturtle.pendown()\nturtle.up(90)\nturtle.go(20)\nturtle.down(90)\nturtle.go(20)sw\nturtle.left(90)\nturtle.go(20)\nturtle.up(90)\nturtle.go(20)\nturtle.penup()\n\n\n\nK\u00f6r vi detta program f\u00e5r vi f\u00f6ljande vackra struktur:", 
            "title": "Avsnitt 1"
        }, 
        {
            "location": "/chapter1/#koda-i-minecraft", 
            "text": "", 
            "title": "Koda i Minecraft"
        }, 
        {
            "location": "/chapter1/#vad-ar-programmering", 
            "text": "En dator \u00e4r uppbyggd kring ett antal delar som samarbetar f\u00f6r att du ska kunna anv\u00e4nda program, spela spel och titta p\u00e5 bilder. Den viktigaste delen \u00e4r processorn eller central processing unit (CPU). Processorn \u00e4r expert p\u00e5 att utf\u00f6ra instruktioner, som t ex ber\u00e4kna summan av 2+2, fyll minnet med text eller rita linjer p\u00e5 sk\u00e4rmen. Den andra viktiga delen i datorn \u00e4r minnet. Minnet anv\u00e4nds f\u00f6r att lagra de instruktioner som ska utf\u00f6ras av processorn samt information som anv\u00e4nds f\u00f6r att visa text, grafik och video p\u00e5 sk\u00e4rmen. Ett antal av dessa instruktioner som tillsammans utf\u00f6r en uppgift kallar man ett program eller en applikation.   De instruktioner som processorn utf\u00f6r kallas f\u00f6r maskininstruktioner och \u00e4r mycket komplicerade att skriva. F\u00f6r att g\u00f6ra det enklare anv\u00e4nder man ist\u00e4llet n\u00e5gon form av programmeringsspr\u00e5k, som anv\u00e4nder instruktioner som \u00e4r enklare f\u00f6r oss att skriva och f\u00f6rst\u00e5. Dessa instruktioner \u00f6vers\u00e4tts med hj\u00e4lp av ett speciellt program som kallas kompilator eller \u00f6vers\u00e4ttare till maskininstruktioner.  Instruktioner skrivna i ett programmeringsspr\u00e5k kallas tillsammans f\u00f6r programkod eller k\u00e4llkod. Programkoden skrivs ofta i en texteditor eller en speciell utvecklingsmilj\u00f6 som kopplar ihop en texteditor med en kompilator.  F\u00f6r att f\u00e5 datorn att g\u00f6ra n\u00e5got anv\u00e4nder vi oss av n\u00e5got som kallas funktioner eller kommandon. Dessa talar om f\u00f6r datorn vad vi vill g\u00f6ra. Ett typiskt kommando eller funktion i Python best\u00e5r av 2 delar, funktionsnamnet och indata till funktionen (...). F\u00f6ljande exempel visar hur vi kan skicka ett meddelande till chatt-f\u00f6nstret i Minecraft.  minecraft.postToChat(\"Hejsan Minecraft!\")  minecraft.postToChat  \u00e4r funktionsnamnet,  (\"Hejsan Minecraft!\")  \u00e4r indata till kommandot.   Genom att s\u00e4tta ihop flera instruktioner talar man om f\u00f6r datorn hur den ska utf\u00f6ra en uppgift p\u00e5 samma s\u00e4tt som instruktionerna i recepten i kokboken. I n\u00e4sta exempel l\u00e4gger vill 2 kommandon till. Ett kommando,  sleep(5) , anger att programmet ska v\u00e4nta i 5 sekunder och ett kommando som skriver ut \"Hej igen!\" i chatt-f\u00f6nstret:  minecraft.postToChat(\"Hejsan Minecraft!\")\nsleep(5)\nminecraft.postToChat(\"Hej igen!\")  K\u00f6r man programmet igen kommer f\u00f6ljande upp i Minecraft:", 
            "title": "Vad \u00e4r programmering"
        }, 
        {
            "location": "/chapter1/#anpassa-minecraft", 
            "text": "F\u00f6r att det ska bli l\u00e4ttare att programmera med Minecraft kan det vara bra att st\u00e4nga av funktionen i Minecraft som pausar programmet n\u00e4r man byter program i Windows. Detta g\u00f6rs genom att trycka p\u00e5  F3 + P . N\u00e4r detta \u00e4r gjort tryck en kort g\u00e5ng p\u00e5  F3  f\u00f6r att ta bort informationstexten. Tryck  F3 + P  igen f\u00f6r att \u00e5terst\u00e4lla Minecraft inst\u00e4llningen igen.  M\u00e5nga egenskaper i Minecraft g\u00e5r att styra ifr\u00e5n chattf\u00f6nstret. Detta f\u00f6nster \u00f6ppnas genom att trycka p\u00e5 T. N\u00e5gra bra kommandon man kan skriva i detta \u00e4r:   /time set day  - \u00c5terst\u00e4ller tiden till morgon (10:00)  /weather clear  - Fint v\u00e4der", 
            "title": "Anpassa Minecraft"
        }, 
        {
            "location": "/chapter1/#mitt-forsta-minecraft-program", 
            "text": "Vi ska nu skapa v\u00e5rt f\u00f6rsta Minecraft program i Python. Skapa en ny Python-fil i IDLE eller i Python f\u00f6r Minecraft Editorn.   Det f\u00f6rsta vi m\u00e5ste g\u00f6ra i v\u00e5rt program \u00e4r att tala om f\u00f6r Python att vi beh\u00f6ver kommandon f\u00f6r att prata med Minecraft, samt kommandon f\u00f6r att kunna g\u00f6ra pauser i programk\u00f6rningen. Skriv in f\u00f6ljande rader i editorn.   from mc import *\nfrom time import *  I n\u00e4sta steg skapar vi kopplingen till Minecraft.   minecraft = Minecraft()  Detta g\u00f6r att vi f\u00e5r tillg\u00e5ng till Minecraft genom en objektet, minecraft. minecraft-objektet inneh\u00e5ller alla de kommandon som beh\u00f6vs f\u00f6r att styra Minecraft, t ex genom att l\u00e4gga till f\u00f6ljande kommandon:  minecraft.postToChat(\"Hejsan Minecraft!\")\nsleep(5)\nminecraft.postToChat(\"Hej igen!\")  Det kompletta programmet ser ut s\u00e5 h\u00e4r:  from mc import *\nfrom time import *\n\nminecraft = Minecraft()\n\nminecraft.postToChat(\"Hejsan Minecraft!\")\nsleep(5)\nminecraft.postToChat(\"Hej igen!\")   \u00d6vning 1  Modifiera programmet s\u00e5 att det skriver ut fler meddelanden i chattf\u00f6nstret. Vad h\u00e4nder om man \u00e4ndrar siffran i sleep(..) kommandot?", 
            "title": "Mitt f\u00f6rsta Minecraft program"
        }, 
        {
            "location": "/chapter1/#var-ar-jag-nagonstans", 
            "text": "Om vi skall bygga och skapa saker i Minecraft kan det vara bra att veta var man \u00e4r n\u00e5gonstans. I Minecraft best\u00e4ms detta av ett s\u00e5 kallat koordinatsystem med 3 axlar, X, Y och Z. Det g\u00e5r att se var man befinner sig i detta koordinatsystem genom att trycka p\u00e5  F3 .     XYZ: anger var spelaren befinner sig i v\u00e4rlden. I bilden befinner sig spelare i position (X = -310, Y =  4, Z = 478). X och Z anger var spelaren befinner sig l\u00e4ngs marken. Y anger p\u00e5 vilken h\u00f6jd spelaren befinner sig.  I programkoden kan man ta reda p\u00e5 spelarens position med f\u00f6ljande kommando:  pos = minecraft.player.getTilePos()  Kommandot minecraft.player.getTilePos fr\u00e5gar Minecraft var spelaren befinner sig f\u00f6r tillf\u00e4llet. Vi f\u00e5r tillbaka en s.k. variabel,  pos  som inneh\u00e5ller spelarens position.    Variabler  - I b\u00f6rjan av denna text pratade vi om hur datorn lagrar program och information i minnet. I program beh\u00f6ver vi ocks\u00e5 ofta lagra information, som t ex siffror, text och grafik i minnet f\u00f6r att kunna h\u00e4mta tillbaka det n\u00e4r vi beh\u00f6ver det. I de tidigare exemplen har vi angett siffror direkt till funktionerna. M\u00e5nga g\u00e5nger har vi ocks\u00e5 angett samma siffra m\u00e5nga g\u00e5nger. F\u00f6r att f\u00f6renkla hanteringen av information i program anv\u00e4nder man sig av variabler. Variabler kan liknas vid en l\u00e5da i en byr\u00e5l\u00e5da med en etikett p\u00e5. I l\u00e5dan kan vi l\u00e4gga olika saker. Etiketten g\u00f6r det l\u00e4tt att hitta sakerna i l\u00e5dan igen. I datorns v\u00e4rld anger en variabel en plats i minnet. Namnet p\u00e5 variabeln \u00e4r etiketten som g\u00f6r att vi kan hitta tillbaka till denna minnesplats igen.   pos  inneh\u00e5ller spelarens X, Y och Z position i f\u00f6rh\u00e5llande till den position man startade i v\u00e4rlden. Vi kan skriva ut inneh\u00e5llet i dessa till chattf\u00f6nstret med f\u00f6ljande kommandon:  minecraft.postToChat(pos.x)\nminecraft.postToChat(pos.y)\nminecraft.postToChat(pos.z)  I Minecraft visas d\u00e5    i chattf\u00f6nstret. 20 \u00e4r v\u00e5r position i x-led, 0 \u00e4r positionen i y-led och 15 \u00e4r v\u00e5r position i z-led.  Det kompletta programmet visas i f\u00f6ljande listning:  from mc import *\n\nminecraft = Minecraft()\n\npos = minecraft.player.getTilePos()\n\nminecraft.postToChat(pos.x)\nminecraft.postToChat(pos.y)\nminecraft.postToChat(pos.z)   \u00d6vning 2  Prova att g\u00e5 till olika st\u00e4llen i Minecraft f\u00f6r att se hur det p\u00e5verkar X, Y och Z v\u00e4rdena i  pos  variabeln.   Vi kan skriva ut spelarens position p\u00e5 ett mer elegant s\u00e4tt genom att \u00e4ndra de tre tidigare kommandona till ett enda kommando:  minecraft.postToChat(\"x = \" + str(pos.x) + \", y = \" + str(pos.y) + \", z = \" + str(pos.z))  I det ovanst\u00e5ende kommadot anv\u00e4nder vi + f\u00f6r att sl\u00e5 ihop flera texter. str(...) \u00f6vers\u00e4tter siffror till text.", 
            "title": "Var \u00e4r jag n\u00e5gonstans?"
        }, 
        {
            "location": "/chapter1/#enkel-upprepning", 
            "text": "M\u00e5nga g\u00e5nger n\u00e4r man skriver program m\u00e5ste man upprepa kommandon m\u00e5nga g\u00e5nger. F\u00f6r att g\u00f6ra det enklare kan vi instruera datorn att hela tiden upprepa vissa kommandon. Detta kallas ofta f\u00f6r att man skapar loopar. Vi skall nu modifiera v\u00e5rt program att med j\u00e4mna mellanrum skriva ut spelarens position i chattf\u00f6nstret. I exemplet skall vi anv\u00e4nda en s.k. while-sats. Denna upprepar kommandon tills dess att ett visst villkor inte \u00e4r uppfyllt l\u00e4ngre. Vi skriver in f\u00f6ljande:  while True:\n    sleep(1)\n    pos = minecraft.player.getTilePos()\n    minecraft.postToChat(\"x = %g, y = %g, z = %g\" % (pos.x, pos.y, pos.z))  Kommandon som skall upprepas m\u00e5ste vara indragna i f\u00f6rh\u00e5llande till while-satsen. While-satsen m\u00e5ste ocks\u00e5 avslutas med ett : f\u00f6r att indikera var de upprepade kommandona b\u00f6rjar.  sleep(1)  anger att programk\u00f6rningen skall pausa i 1 sekund. \u00d6vriga kommandon tar reda p\u00e5 spelarens position och skriver ut denna i chattf\u00f6nstret. Om allt fungerar visas f\u00f6ljande i chattf\u00f6nstret:   T\u00e4nk p\u00e5 att detta program aldrig stannar, s\u00e5 att vi m\u00e5ste trycka p\u00e5 stopp-knappen i editorn eller Ctrl-C i IDLE.  Det kompletta programmet visas i f\u00f6ljande listning:  from mc import *\nfrom time import *\n\nminecraft = Minecraft()\n\nwhile True:\n    sleep(1)\n    pos = minecraft.player.getTilePos()\n    minecraft.postToChat(\"x = %g, y = %g, z = %g\" % (pos.x, pos.y, pos.z))", 
            "title": "Enkel upprepning"
        }, 
        {
            "location": "/chapter1/#skapa-block", 
            "text": "Block skapas Minecraft med kommandot  setBlock(..)  Indata till kommandot \u00e4r positionen in X, Y och Z samt blockets id. F\u00f6r att s\u00e4tta ut ett stenblock anger man f\u00f6ljande kommando:  pos = minecraft.player.getTilePos()\n\nminecraft.setBlock(pos.x+3, pos.y, pos.z, STONE.id)  Detta s\u00e4tter ut ett block av typen STONE.id 3 block fr\u00e5n spelaren i X-led och p\u00e5 samma h\u00f6jd som spelaren. Vi kan nu skapa fler block genom att l\u00e4gga till fler kommandon:  pos = minecraft.player.getTilePos()\n\nminecraft.setBlock(pos.x+3, pos.y, pos.z, STONE.id)\nminecraft.setBlock(pos.x+3, pos.y+1, pos.z, COBBLESTONE.id)\nminecraft.setBlock(pos.x+3, pos.y, pos.z+1, WOOD_PLANKS.id)\nminecraft.setBlock(pos.x+3, pos.y+1, pos.z+1, GOLD_ORE.id)   Man kan anv\u00e4nda bl\u00e4ddraren i editorn f\u00f6r att klistra in block i koden. V\u00e4lj ett block i lista n och klicka sedan  L\u00e4gg till  enligt f\u00f6ljande figur:   Det g\u00e5r att skapa m\u00e5nga block p\u00e5 en g\u00e5ng genom att anv\u00e4nda kommandot  setBlocks . I detta kommando kan man ange start och slut position mellan vilka blocken skall placeras. I f\u00f6ljande kommandon s\u00e4tter vi ut l\u00f6vblock fr\u00e5n (X + 10, Y, Z + 10) - (X + 20, Y + 4, Z + 20):  pos = minecraft.player.getTilePos()\n\nminecraft.setBlocks(pos.x + 10, pos.y, pos.z + 10, pos.x + 20, pos.y + 4, pos.z + 20, LEAVES.id)   Det g\u00e5r ocks\u00e5 att s\u00e4tta ut luftblock AIR.id och vatten block, WATER.id, p\u00e5 detta s\u00e4tt. I f\u00f6ljande exempel bygger vi ett akvarie genom att f\u00f6rst skapa block av glas och sedan fylla den inre delen av detta block med vatten:  pos = minecraft.player.getTilePos()\n\nminecraft.setBlocks(pos.x - 20, pos.y, pos.z - 20, pos.x - 10, pos.y + 6, pos.z - 10, GLASS.id)\nminecraft.setBlocks(pos.x - 19, pos.y + 1, pos.z -19, pos.x - 11, pos.y + 5, pos.z -11, WATER.id)   Att det \u00e4r vatten kan vi se om vi sl\u00e5r i s\u00f6nder ett av f\u00f6nsterblocken:    \u00d6vning 3  Prova att skapa ett hus av sten eller n\u00e5got annat material och sedan gr\u00f6pa ur det genom att skapa luftblock inuti.", 
            "title": "Skapa block"
        }, 
        {
            "location": "/chapter1/#anvanda-skoldpaddsgrafik-turtle-i-minecraft", 
            "text": "F\u00f6r att g\u00f6ra det l\u00e4ttare att skapa och ta bort block kan man anv\u00e4nda en s.k. sk\u00f6ldpadda med en 3D penna f\u00f6r att skapa block eller ta bort block. Tunnlar i Minecraft kan vara jobbiga att g\u00f6ra f\u00f6r hand. Med hj\u00e4lp av sk\u00f6ldpaddan kan vi snabbt och enkelt borra h\u00e5l i v\u00e5r v\u00e4rld precis som n\u00e4r man skapar riktiga tunnlar. F\u00f6ljande exempel visar hur vi gr\u00e4ver en 5 block bred tunnnel ner i marken och sedan upp igen:  from mc import *\nfrom mcturtle import *\n\nminecraft = Minecraft()\n\nturtle = Turtle()\n\nturtle.pendelay(0)         # Anger hur om uppritningen skall ske l\u00e5ngsamt eller snabbt \nmaterial = AIR             # Variabel f\u00f6r materialet som skall anv\u00e4ndas\nturtle.penwidth(5)         # Tjocklek p\u00e5 \"pennan\"\nturtle.penblock(material)  # S\u00e4tt pennans material\nturtle.pendown()           # B\u00f6rja gr\u00e4va\nturtle.down(45)            # 45 grader ned\u00e5t\nturtle.go(20)              # 20 block fram\u00e5t\nturtle.up(45)              # 45 grader upp\u00e5t\nturtle.go(20)              # 20 block fram\u00e5t\nturtle.up(45)              # upp 45 grader\nturtle.go(20)              # 20 block fram\u00e5t\nturtle.penup()             # Avsluta ritandet  Om programmet k\u00f6rs skapas nu en tunnel ner i marken:   P\u00e5v\u00e4g ner i tunneln.   Nere i tunneln. Lamporna \u00e4r tillagda i efterhand.   P\u00e5v\u00e4g upp.   I det tidigare exemplet anv\u00e4nde vi tomma block, AIR.id, f\u00f6r att skapa tunnlar. Vi kan ocks\u00e5 skapa strukturer med sk\u00f6ldpaddan. I f\u00f6ljande exempel skapar vi en skulptur av GOLD_BLOCK.id.  from mc import *\nfrom mcturtle import *\n\nminecraft = Minecraft()\n\nturtle = Turtle()\n\nturtle.pendelay(0)\nmaterial = GOLD_BLOCK.id\nturtle.penwidth(2)\nturtle.penblock(material)\nturtle.pendown()\nturtle.up(90)\nturtle.go(20)\nturtle.down(90)\nturtle.go(20)sw\nturtle.left(90)\nturtle.go(20)\nturtle.up(90)\nturtle.go(20)\nturtle.penup()  K\u00f6r vi detta program f\u00e5r vi f\u00f6ljande vackra struktur:", 
            "title": "Anv\u00e4nda sk\u00f6ldpaddsgrafik (turtle) i Minecraft"
        }
    ]
}